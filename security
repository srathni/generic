import streamlit as st
import pandas as pd
import pyodbc
from datetime import datetime

# Database connection configuration
@st.cache_resource
def init_connection():
    """Initialize database connection"""
    # Replace with your actual connection string
    connection_string = st.secrets.get("database", {}).get("connection_string", "")
    if not connection_string:
        st.error("Database connection string not found in secrets. Please configure it.")
        return None
    
    try:
        conn = pyodbc.connect(connection_string)
        return conn
    except Exception as e:
        st.error(f"Failed to connect to database: {str(e)}")
        return None

@st.cache_data(ttl=300)  # Cache for 5 minutes
def get_all_batches():
    """Get all batch details"""
    conn = init_connection()
    if conn is None:
        return pd.DataFrame()
    
    query = """
    SELECT batch_name, batch_description, src_system_id, enabled_flag, 
           created_by, created_date, last_modified_by, last_modified_date 
    FROM atlaas_metadata_catalog.ae_batch
    ORDER BY batch_name
    """
    
    try:
        df = pd.read_sql(query, conn)
        return df
    except Exception as e:
        st.error(f"Failed to fetch batch data: {str(e)}")
        return pd.DataFrame()

def update_batch(batch_name, updated_data):
    """Update batch details in database"""
    conn = init_connection()
    if conn is None:
        return False
    
    try:
        cursor = conn.cursor()
        
        # Prepare update query
        set_clause = """
        batch_description = ?, 
        src_system_id = ?, 
        enabled_flag = ?, 
        last_modified_by = ?, 
        last_modified_date = ?
        """
        
        query = f"""
        UPDATE atlaas_metadata_catalog.ae_batch 
        SET {set_clause}
        WHERE batch_name = ?
        """
        
        # Execute update
        cursor.execute(query, (
            updated_data['batch_description'],
            updated_data['src_system_id'],
            updated_data['enabled_flag'],
            updated_data['last_modified_by'],
            datetime.now(),
            batch_name
        ))
        
        conn.commit()
        cursor.close()
        
        # Clear cache to refresh data
        get_all_batches.clear()
        
        return True
        
    except Exception as e:
        st.error(f"Failed to update batch: {str(e)}")
        return False

def main():
    st.set_page_config(page_title="Edit Batch", page_icon="üìù", layout="wide")
    
    st.title("üìù Edit Batch Details")
    st.markdown("---")
    
    # Get all batches
    batches_df = get_all_batches()
    
    if batches_df.empty:
        st.warning("No batch data found or unable to connect to database.")
        return
    
    # Create searchable dropdown
    st.header("Select Batch to Edit")
    
    # Search/Filter functionality
    search_term = st.text_input("üîç Search batch name:", placeholder="Type to search...")
    
    # Filter batches based on search term
    if search_term:
        filtered_batches = batches_df[
            batches_df['batch_name'].str.contains(search_term, case=False, na=False)
        ]
    else:
        filtered_batches = batches_df
    
    if filtered_batches.empty:
        st.warning("No batches found matching your search.")
        return
    
    # Dropdown with filtered results
    batch_names = filtered_batches['batch_name'].tolist()
    selected_batch = st.selectbox(
        "Choose a batch:",
        options=batch_names,
        index=None,
        placeholder="Select a batch to edit..."
    )
    
    if not selected_batch:
        st.info("Please select a batch to edit.")
        return
    
    # Get selected batch details
    batch_details = batches_df[batches_df['batch_name'] == selected_batch].iloc[0]
    
    st.markdown("---")
    st.header(f"Editing: {selected_batch}")
    
    # Create editing form
    with st.form("batch_edit_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            # Read-only fields
            st.text_input("Batch Name:", value=batch_details['batch_name'], disabled=True)
            st.text_input("Created By:", value=str(batch_details['created_by']), disabled=True)
            st.text_input("Created Date:", value=str(batch_details['created_date']), disabled=True)
            
        with col2:
            # Editable fields
            batch_description = st.text_area(
                "Batch Description:", 
                value=str(batch_details['batch_description']) if pd.notna(batch_details['batch_description']) else "",
                height=100
            )
            
            src_system_id = st.text_input(
                "Source System ID:", 
                value=str(batch_details['src_system_id']) if pd.notna(batch_details['src_system_id']) else ""
            )
            
            enabled_flag = st.selectbox(
                "Enabled Flag:",
                options=['Y', 'N'],
                index=0 if batch_details['enabled_flag'] == 'Y' else 1
            )
            
            last_modified_by = st.text_input(
                "Modified By:", 
                value=st.session_state.get('username', 'system'),
                help="Enter your username"
            )
        
        # Display current last modified info
        st.info(f"Last Modified: {batch_details['last_modified_date']} by {batch_details['last_modified_by']}")
        
        # Save button
        col1, col2, col3 = st.columns([1, 1, 2])
        
        with col1:
            submitted = st.form_submit_button("üíæ Save Changes", type="primary")
        
        with col2:
            if st.form_submit_button("üîÑ Refresh Data"):
                get_all_batches.clear()
                st.rerun()
    
    # Handle form submission
    if submitted:
        if not last_modified_by.strip():
            st.error("Please enter your username in 'Modified By' field.")
        else:
            updated_data = {
                'batch_description': batch_description,
                'src_system_id': src_system_id,
                'enabled_flag': enabled_flag,
                'last_modified_by': last_modified_by.strip()
            }
            
            with st.spinner("Saving changes..."):
                success = update_batch(selected_batch, updated_data)
                
                if success:
                    st.success("‚úÖ Batch details updated successfully!")
                    st.balloons()
                    
                    # Show updated values
                    with st.expander("Updated Values", expanded=True):
                        st.write(f"**Batch Name:** {selected_batch}")
                        st.write(f"**Description:** {batch_description}")
                        st.write(f"**Source System ID:** {src_system_id}")
                        st.write(f"**Enabled:** {enabled_flag}")
                        st.write(f"**Modified By:** {last_modified_by}")
                        st.write(f"**Modified Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                else:
                    st.error("‚ùå Failed to save changes. Please try again.")
    
    # Show current batch summary
    st.markdown("---")
    st.header("Current Batch Summary")
    
        # Display in a nice format
    summary_data = {
        "Field": ["Batch Name", "Description", "Source System ID", "Enabled", "Created By", "Created Date", "Last Modified By", "Last Modified Date"],
        "Value": [
            batch_details['batch_name'],
            batch_details['batch_description'] if pd.notna(batch_details['batch_description']) else "N/A",
            batch_details['src_system_id'] if pd.notna(batch_details['src_system_id']) else "N/A",
            batch_details['enabled_flag'],
            batch_details['created_by'],
            str(batch_details['created_date']),
            batch_details['last_modified_by'] if pd.notna(batch_details['last_modified_by']) else "N/A",
            str(batch_details['last_modified_date']) if pd.notna(batch_details['last_modified_date']) else "N/A"
        ]
    }
    
    summary_df = pd.DataFrame(summary_data)
    st.dataframe(summary_df, use_container_width=True, hide_index=True)

if __name__ == "__main__":
    main()
ted_date']),
            batch_details['last_modified_by
