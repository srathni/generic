import streamlit as st
import pyodbc
import pandas as pd
from datetime import datetime
import re

# Initialize session state
if 'column_mappings' not in st.session_state:
    st.session_state.column_mappings = []

if 'show_column_mapping' not in st.session_state:
    st.session_state.show_column_mapping = False

# Database connection function
@st.cache_resource
def get_db_connection():
    """
    Establish connection to SQL Server database
    Replace with your actual connection parameters
    """
    try:
        # Update these connection parameters with your actual database details
        conn_str = (
            "DRIVER={ODBC Driver 17 for SQL Server};"
            "SERVER=your_server_name;"
            "DATABASE=your_database_name;"
            "UID=your_username;"
            "PWD=your_password;"
        )
        conn = pyodbc.connect(conn_str)
        return conn
    except Exception as e:
        st.error(f"Database connection failed: {str(e)}")
        return None

def get_batches():
    """Fetch enabled batches from database"""
    conn = get_db_connection()
    if conn:
        try:
            query = "SELECT batch_id, batch_name FROM atlaas_metadata_catalog.ae_batch WHERE enabled_flag = 'Y'"
            df = pd.read_sql(query, conn)
            conn.close()
            return df
        except Exception as e:
            st.error(f"Error fetching batches: {str(e)}")
            conn.close()
            return pd.DataFrame()
    return pd.DataFrame()

def validate_sql(sql_code):
    """
    Validate SQL code - placeholder function
    You can implement actual SQL validation logic here
    """
    # Placeholder - always returns True for now
    return True

def extract_select_columns(sql_query):
    """
    Extract column information from SELECT statement
    This is a basic implementation - you may want to enhance it
    """
    try:
        # Basic regex to extract SELECT clause
        select_pattern = r'SELECT\s+(.*?)\s+FROM'
        match = re.search(select_pattern, sql_query.upper(), re.DOTALL)
        
        if match:
            select_clause = match.group(1)
            # Split by comma and clean up
            columns = [col.strip() for col in select_clause.split(',')]
            return columns
        return []
    except:
        return []

def add_column_mapping_row():
    """Add a new row to column mappings"""
    new_row = {
        'source_table': '',
        'source_column': '',
        'target_table': '',
        'target_column': '',
        'target_column_desc': '',
        'expression': '',
        'enabled_flag': 'Y',
        'created_by': st.session_state.get('user_name', 'system'),
        'created_date': datetime.now(),
        'last_modified_by': st.session_state.get('user_name', 'system'),
        'last_modified_date': datetime.now()
    }
    st.session_state.column_mappings.append(new_row)

def delete_column_mapping_row(index):
    """Delete a column mapping row"""
    if 0 <= index < len(st.session_state.column_mappings):
        st.session_state.column_mappings.pop(index)

def insert_rule_data(batch_id, rule_data, column_mappings, joins_data):
    """Insert rule and related data into database"""
    conn = get_db_connection()
    if not conn:
        return False, "Database connection failed"
    
    try:
        cursor = conn.cursor()
        
        # Insert into ae_rules table
        rule_insert_query = """
        INSERT INTO atlaas_metadata_catalog.ae_rules 
        (batch_id, rule_name, rule_description, rule_category, rule_type, rule_order,
         input_parameters, target_dataset, target_type, enabled_flag, src_system_id,
         rule_start_date, rule_end_date, additional_details, save_as_view, view_name,
         rule_execution_code, created_by, created_date)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """
        
        cursor.execute(rule_insert_query, (
            batch_id, rule_data['rule_name'], rule_data['rule_description'],
            rule_data['rule_category'], rule_data['rule_type'], rule_data['rule_order'],
            rule_data['input_parameters'], rule_data['target_dataset'], rule_data['target_type'],
            rule_data['enabled_flag'], rule_data['src_system_id'], rule_data['rule_start_date'],
            rule_data['rule_end_date'], rule_data['additional_details'], rule_data['save_as_view'],
            rule_data['view_name'], rule_data['rule_execution_code'], 
            st.session_state.get('user_name', 'system'), datetime.now()
        ))
        
        # Insert column mappings if any
        if column_mappings:
            mapping_insert_query = """
            INSERT INTO atlaas_metadata_catalog.ae_rules_column_mapping
            (rule_name, source_table, source_column, target_table, target_column,
             target_column_desc, expression, enabled_flag, created_by, created_date,
             last_modified_by, last_modified_date)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """
            
            for mapping in column_mappings:
                cursor.execute(mapping_insert_query, (
                    rule_data['rule_name'], mapping['source_table'], mapping['source_column'],
                    mapping['target_table'], mapping['target_column'], mapping['target_column_desc'],
                    mapping['expression'], mapping['enabled_flag'], mapping['created_by'],
                    mapping['created_date'], mapping['last_modified_by'], mapping['last_modified_date']
                ))
        
        # Insert joins data
        joins_insert_query = """
        INSERT INTO atlaas_metadata_catalog.ae_rules_joins
        (rule_name, joins, filter, group_by, order_by, enabled_flag, created_by, created_date,
         last_modified_by, last_modified_date)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """
        
        cursor.execute(joins_insert_query, (
            rule_data['rule_name'], joins_data['joins'], joins_data['filter'],
            joins_data['group_by'], joins_data['order_by'], joins_data['enabled_flag'],
            st.session_state.get('user_name', 'system'), datetime.now(),
            st.session_state.get('user_name', 'system'), datetime.now()
        ))
        
        conn.commit()
        cursor.close()
        conn.close()
        return True, "Rule added successfully!"
        
    except Exception as e:
        conn.rollback()
        cursor.close()
        conn.close()
        return False, f"Error inserting data: {str(e)}"

# Main Streamlit App
def main():
    st.title("Batch Rule Management System")
    st.markdown("Add rules to PySpark batches with SQL Server integration")
    
    # User identification (you might want to implement proper authentication)
    if 'user_name' not in st.session_state:
        st.session_state.user_name = st.text_input("Enter your username:", value="admin")
    
    # Step 1: Select Batch
    st.header("1. Select Batch")
    batches_df = get_batches()
    
    if batches_df.empty:
        st.error("No enabled batches found or database connection issue")
        return
    
    # Create a selectbox with batch options
    batch_options = dict(zip(batches_df['batch_name'], batches_df['batch_id']))
    selected_batch_name = st.selectbox("Select a batch:", list(batch_options.keys()))
    selected_batch_id = batch_options[selected_batch_name]
    
    st.success(f"Selected Batch: {selected_batch_name} (ID: {selected_batch_id})")
    
    # Step 2: Rule Details
    st.header("2. Rule Details")
    
    col1, col2 = st.columns(2)
    
    with col1:
        rule_name = st.text_input("Rule Name*", key="rule_name")
        rule_description = st.text_area("Rule Description", key="rule_description")
        rule_category = st.selectbox("Rule Category", ["Data Quality", "Transformation", "Validation", "Other"])
        rule_type = st.selectbox("Rule Type", ["SQL", "Iceberg Update", "Iceberg Merge", "Python Function"])
        rule_order = st.number_input("Rule Order", min_value=1, value=1)
    
    with col2:
        input_parameters = st.text_area("Input Parameters", key="input_parameters")
        target_dataset = st.text_input("Target Dataset", key="target_dataset")
        target_type = st.selectbox("Target Type", ["Table", "View", "File"])
        enabled_flag = st.selectbox("Enabled", ["Y", "N"], index=0)
        src_system_id = st.text_input("Source System ID", key="src_system_id")
        
        col2a, col2b = st.columns(2)
        with col2a:
            rule_start_date = st.date_input("Rule Start Date")
        with col2b:
            rule_end_date = st.date_input("Rule End Date")
        
        additional_details = st.text_area("Additional Details", key="additional_details")
        save_as_view = st.selectbox("Save As View", ["Y", "N"], index=1)
        view_name = st.text_input("View Name", key="view_name")
    
    # Step 3: Rule Execution Code
    st.header("3. Rule Execution Code")
    rule_execution_code = st.text_area("Rule Execution Code", height=200, key="rule_execution_code")
    
    # Validate SQL Button
    if st.button("Validate SQL"):
        if rule_execution_code.strip():
            is_valid = validate_sql(rule_execution_code)
            if is_valid:
                st.success("SQL is valid!")
                # Show column mapping section if it's a SQL rule
                if rule_type == "SQL" and "SELECT" in rule_execution_code.upper():
                    st.session_state.show_column_mapping = True
            else:
                st.error("SQL validation failed!")
        else:
            st.warning("Please enter rule execution code first")
    
    # Step 4: Column Mapping (for SQL rules)
    if st.session_state.show_column_mapping and rule_type == "SQL":
        st.header("4. Column Mapping")
        
        # Initialize with some rows if empty
        if not st.session_state.column_mappings:
            add_column_mapping_row()
        
        # Display column mapping table
        for i, mapping in enumerate(st.session_state.column_mappings):
            st.subheader(f"Column Mapping {i+1}")
            
            col_del, col_source_table, col_source_col, col_target_table, col_target_col = st.columns([1, 3, 3, 3, 3])
            
            with col_del:
                if st.button("➖", key=f"delete_{i}", help="Delete this row"):
                    delete_column_mapping_row(i)
                    st.rerun()
            
            with col_source_table:
                st.session_state.column_mappings[i]['source_table'] = st.text_input(
                    "Source Table", value=mapping['source_table'], key=f"src_table_{i}")
            
            with col_source_col:
                st.session_state.column_mappings[i]['source_column'] = st.text_input(
                    "Source Column", value=mapping['source_column'], key=f"src_col_{i}")
            
            with col_target_table:
                st.session_state.column_mappings[i]['target_table'] = st.text_input(
                    "Target Table", value=mapping['target_table'], key=f"tgt_table_{i}")
            
            with col_target_col:
                st.session_state.column_mappings[i]['target_column'] = st.text_input(
                    "Target Column", value=mapping['target_column'], key=f"tgt_col_{i}")
            
            col_desc, col_expr, col_enabled = st.columns(3)
            
            with col_desc:
                st.session_state.column_mappings[i]['target_column_desc'] = st.text_input(
                    "Target Column Description", value=mapping['target_column_desc'], key=f"tgt_desc_{i}")
            
            with col_expr:
                st.session_state.column_mappings[i]['expression'] = st.text_input(
                    "Expression", value=mapping['expression'], key=f"expr_{i}")
            
            with col_enabled:
                st.session_state.column_mappings[i]['enabled_flag'] = st.selectbox(
                    "Enabled", ["Y", "N"], index=0 if mapping['enabled_flag'] == 'Y' else 1, key=f"enabled_{i}")
        
        # Add new row button
        if st.button("➕ Add Column Mapping"):
            add_column_mapping_row()
            st.rerun()
    
    # Step 5: SQL Components (Joins, Filters, etc.)
    if rule_type == "SQL":
        st.header("5. SQL Components")
        
        joins = st.text_area("Joins", key="joins", help="JOIN clauses")
        filter_clause = st.text_area("Filter", key="filter", help="WHERE conditions")
        group_by = st.text_input("Group By", key="group_by", help="GROUP BY columns")
        order_by = st.text_input("Order By", key="order_by", help="ORDER BY columns")
    
    # Step 6: Add Rule Button
    st.header("6. Save Rule")
    
    if st.button("Add Rule", type="primary"):
        # Validation
        if not rule_name.strip():
            st.error("Rule Name is required!")
            return
        
        if not rule_execution_code.strip():
            st.error("Rule Execution Code is required!")
            return
        
        # Prepare rule data
        rule_data = {
            'rule_name': rule_name,
            'rule_description': rule_description,
            'rule_category': rule_category,
            'rule_type': rule_type,
            'rule_order': rule_order,
            'input_parameters': input_parameters,
            'target_dataset': target_dataset,
            'target_type': target_type,
            'enabled_flag': enabled_flag,
            'src_system_id': src_system_id,
            'rule_start_date': rule_start_date,
            'rule_end_date': rule_end_date,
            'additional_details': additional_details,
            'save_as_view': save_as_view,
            'view_name': view_name,
            'rule_execution_code': rule_execution_code
        }
        
        # Prepare joins data
        joins_data = {
            'joins': joins if rule_type == "SQL" else '',
            'filter': filter_clause if rule_type == "SQL" else '',
            'group_by': group_by if rule_type == "SQL" else '',
            'order_by': order_by if rule_type == "SQL" else '',
            'enabled_flag': 'Y'
        }
        
        # Insert data
        success, message = insert_rule_data(
            selected_batch_id, 
            rule_data, 
            st.session_state.column_mappings if rule_type == "SQL" else [],
            joins_data
        )
        
        if success:
            st.success(message)
            # Reset form
            st.session_state.column_mappings = []
            st.session_state.show_column_mapping = False
            st.rerun()
        else:
            st.error(message)

if __name__ == "__main__":
    main()
